import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
 
  constructor(private authService: AuthService, private router: Router) {
   }
 
   canActivate(route:ActivatedRouteSnapshot,state:RouterStateSnapshot):boolean{
 
 
    
    const expectedRole=route.data['role'];
    if(!this.authService.isLoggedIn){
      this.router.navigate(['/login']);
      return false;
    }
    if(expectedRole === 'admin' && !this.authService.isAdmin){
      this.router.navigate(['/unauthorized']);
      return false;
    }
    if(expectedRole === 'user' && this.authService.isAdmin){
      this.router.navigate(['/unauthorized']);
      return false;
    }

    return true;
  }
}
 
 

import { Injectable } from '@angular/core';
 
@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly AUTH_TOKEN_KEY = 'auth_token';
  private readonly IS_ADMIN_KEY = 'is_admin';
  private readonly USERNAME_KEY='username';
 
  constructor() {
   //complete missing code here
 
  }
 
  get isLoggedIn(): boolean {
   //complete missing code here
   return localStorage.getItem(this.AUTH_TOKEN_KEY)==='true';
  }
 
  set isLoggedIn(value: boolean) {
  //complete missing code here
    localStorage.setItem(this.AUTH_TOKEN_KEY,value.toString());
  }
 
 
  get isAdmin(): boolean {
//complete missing code here
return localStorage.getItem(this.IS_ADMIN_KEY)==='true';
  }
 
  set SetUser(value: string) {
  //complete missing code here
  localStorage.setItem(this.USERNAME_KEY,value);
  localStorage.setItem(this.AUTH_TOKEN_KEY,'true');
  const is_admin=value==='is_admin';
  localStorage.setItem(this.IS_ADMIN_KEY,is_admin.toString());
 
  // localStorage.setItem(this.USERNAME_KEY,!is_admin.)
  }
 
  login(username: string, password: string): boolean {
    // Implement authentication logic
   //complete missing code here
   if((username === 'admin' && password === 'admin') || (username === 'user' && password === 'user')){
    this.isLoggedIn=true;
    localStorage.setItem(this.IS_ADMIN_KEY,(username ==='admin').toString());
    this.SetUser=username;
    return true;
   }
   return false;
  }
 
  logout(): void {
//complete missing code here
localStorage.removeItem(this.AUTH_TOKEN_KEY);
 
localStorage.removeItem(this.IS_ADMIN_KEY);
localStorage.removeItem(this.USERNAME_KEY);  
}
}
 

import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})
export class LoginComponent implements OnInit{
  formModel:any={}
  itemForm: FormGroup;
  loginFailed:boolean=false;
  constructor(private authService: AuthService,private formBuilder: FormBuilder, private router:Router) 
    {
      this.itemForm=this.formBuilder.group({
        username:['',Validators.required],
        password:['',Validators.required]
      });
 
   }
  ngOnInit(): void {
  }
  onRegister()
  {
    if(this.itemForm.valid)
    {
      const username=this.itemForm.value.username;
      const password=this.itemForm.value.password;
      const success=this.authService.login(username,password);
      if(success){
        this.loginFailed=false;
        if(this.authService.isAdmin){
          this.router.navigate(['/admin']);
        }
        else{
          this.router.navigate(['/user']);
        }
      }
      else{
        this.itemForm.markAllAsTouched();
      }
    }
    else{
      this.itemForm.markAllAsTouched();
    }
  }
}
